# editParflow.txt
# Carolyn Voter
# 2016.06.20

This file describes how to edit parflow scripts to:
A) Print canopy storage
B) Suppress writing uneeded output files

Current file line numbers based on v895

To check for string within files, use grep recursively:
grep -R 'swe' /home/cvoter/parflow/pfsimulator/clm

=============================================
A) TO PRINT CANOPY (H2OCAN)
=============================================
clm%h2ocan --> "can", "can_out", etc.
Can generally search for "clm%h2osno", "swe", "swe_out" and follow name conventions for that flux

pfsimulator/clm/clm.F90
1. Add "can_pf" to subroutine clm_lsm(pressure,saturation,...clm_daily_rst)
2. Around line 96: declare local variable
	real(r8) :: can_pf((nx+2)*(ny+2)*3)            ! can
3. Around line 567: set local variable equal to clm variable
	can_pf(l)          = clm(t)%h2ocan
4. Around line 583: do this again in the else part of the statement
	can_pf(l)          = -9999.0

pfsimulator/clm/open_files.F90
1. Around line 73: add output directory for h2ocan
     open(2010,file=clm_output_dir//'can_out.'//cistep//'.bin.'//trim(adjustl(RI)), access=ACCESS, form=FORM) ! @ 2D output file
     write(2010) ix,iy,iz,drv%nc,drv%nr,nz
2. Around line 127: add output directory for h2ocan
     open(2010,file=clm_output_dir//'can_out/can_out.'//cistep//'.bin.'//trim(adjustl(RI)), access=ACCESS, form=FORM) ! @ 2D output file
     write(2010) ix,iy,iz,drv%nc,drv%nr,nz

pfsimulator/parflow_lib/parflow_proto_f.h
1. Around line 99: correct sequence for CLM_LSM(pressure....clm_daily_rst)
add "can_out_data" wherever see "swe_out_data" (should be 3x)

pfsimulator/parflow_lib/solver_richards.c
1. Around line 229: declare local vars for pf printing of clm output
	Vector      *can_out;              /* canopy water equivalent [mm] */
2. Around line 679: initialize variables for printing CLM output
	instance_xtra -> can_out = NewVectorType( grid2d, 1, 1, vector_cell_centered_2D );
	InitVectorAll(instance_xtra -> can_out, 0.0);
3. Around line 1210: Subvector & double for writing CLM output
	Subvector    *eflx_lh_tot_sub,....
	double       *eflx_lh,...
4. Around line 1655: Subvectors for CLM fluxes
	can_out_sub        = VectorSubvector(instance_xtra -> can_out,is);
5. Around line 1715: Subvector data for CLM fluxes
	can                = SubvectorData(can_out_sub);
6. Around line 1825: CALL_CLM_LSM(pp...clm_daily_restart)

7. Around line 2580: Print CLM output files
	sprintf(file_type, "can_out");
	WriteSilo(file_prefix, file_type, file_postfix, instance_xtra -> can_out,
		t, instance_xtra -> file_number, "CAN");
	clm_file_dumped = 1;
8. Around line 2630: Single file output (not 100% sure how no. of lines change)
	PFVLayerCopy(11, 0, instance_xtra -> clm_out_grid, instance_xtra -> can_out);
	Also adjust existing layer 11, 12, and 13+k.
9. Around line 2700: Multifile output
	sprintf(file_postfix, "can_out.%05d", instance_xtra -> file_number );
	WritePFBinary(file_prefix, file_postfix, instance_xtra -> can_out );
	clm_file_dumped = 1;
10. Around line 3011: FreeVector for CLM data
	FreeVector(instance_xtra -> can_out);

pfsimulator/parflow_lib/write_parflow_silo.c
1. Around line 267: add "can" to list of output types
	"can_out",
	
***NOTE (9/7/17): Need to create directory "can_out" within the parflow test directory 
(i.e., parflow/test/clm/can_out) in order for clm tests to pass. Not 100% sure why. 
But generating the *.pfb files hasn't been an issue with my scripts 
(which don't require one directory/flux).
=============================================
B) TO ELIMINATE EXCESS CLM OUTPUT
=============================================
Don't want:
eflx_lh_tot
eflx_lwrad_out
eflx_sh_tot
eflx_soil_grnd
qflx_evap_tot
qflx_evap_soil
t_grnd
t_soil

pfsimulator/parflow_lib/solver_richards.c
1. Around line 2500: Print CLM output files - in 2 places, both WriteSilo and WritePFBinary

